#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use FileHandle;
use Module::Path qw(module_path);
use Perinci::CmdLine::Any;
use Perinci::Sub::Gen::AccessTable qw(gen_read_table_func);
use Time::Moment;

our %SPEC;
my $data = [];

my $res = gen_read_table_func(
    name => 'list_perl_releases',
    summary => 'List Perl releases',
    description => <<'_',

This function is a table interface to the Perl releases file (releases.txt). It
provides filtering, sorting, and paging to let you easily slice and dice the
data.

_
    table_data => $data,
    table_spec => {
        fields => {
            file => {
                schema => 'str*',
                pos    => 0,
            },
            repo => {
                schema => 'str*',
                pos    => 1,
            },
            date => {
                schema => 'str*', # XXX perisgen belum plays nice with dsah & coercion
                #schema => ['date*', 'x.perl.coerce_to' => 'Time::Moment'],
                pos    => 2,
            },
            ver => {
                schema => 'str*',
                pos    => 3,
            },
            size => {
                schema => 'int*',
                pos    => 4,
            },
            oldname => {
                summary => 'Old name',
                schema  => 'str',
                pos     => 5,
                description => <<'_',

If dist is a rename of old dist, this field will contain the old name. This will
allow us to count renames.

_
            },
            status => {
                schema => 'str',
                pos    => 6,
            },
        },
        pk => 'file',
    },
    hooks => {
        before_parse_query => sub {
            my %args = @_;
            #my $fargs = $args{_func_args};

            $args{include_renamed} //= 0 if $args{new};

            my %seen_dists; # value:row
            my %latest_dists;

            # read data from releases.txt
            my $archive_dir = $args{archive_dir} //
                "$ENV{HOME}/repos/priv-releases-perl";
            splice @$data, 0;
            my $fh = FileHandle->new("$archive_dir/releases.txt", "r") or
                return [400, "Can't open releases.txt in $archive_dir: $!"];
            while (my $line = $fh->getline) {

                my $row = { map {/(\w+):(.*)/;($1,$2)} split /\t/, $line };
                my $dist = $row->{file}; $dist =~ s/(.+)-v?\d.+/$1/;

                my $is_new = !$seen_dists{$dist};
                $seen_dists{$dist} = $row;
                $latest_dists{$dist} = $row;
                next if $args{new} && !$is_new;
                next if defined($args{new}) && !$args{new} && $is_new;

                if (defined(my $y = $args{year})) {
                    next unless substr($row->{date},0,4) eq sprintf("%04d",$y);
                }
                if (defined(my $m = $args{month})) {
                    next unless substr($row->{date},5,2) eq sprintf("%02d",$m);
                }
                if (defined(my $d = $args{day})) {
                    next unless substr($row->{date},8,2) eq sprintf("%02d",$d);
                }
                if (defined(my $d = $args{dist})) {
                    next unless $d eq $dist;
                }

                if (defined($args{include_renamed}) &&
                        !$args{include_renamed} && $row->{oldname}) {
                    %{ $seen_dists{$row->{oldname}} } = %$row;
                    next;
                }

                push @$data, $row;

            }

            if ($args{latest}) {
                splice @$data, 0;
                for (sort {$latest_dists{$a}{date} cmp $latest_dists{$b}{date}}
                         keys %latest_dists) {
                    push @$data, $latest_dists{$_};
                }
            }

            return;
        },
        before_return => sub {
            my %args = @_;
            my $fres = $args{_func_res};
            # convert dates back to YMD for display
            if (0) {
                last unless $fres->[0] == 200;
                for my $row (@{$fres->[2]}) {
                    if (ref($row) eq 'HASH') {
                        $row->{date} = $row->{date}->strftime("%Y-%m-%d");
                    }
                }
            }
        },
    },
);
die "Can't generate func: $res->[0] - $res->[1]" unless $res->[0] == 200;
$SPEC{list_perl_releases}{args}{archive_dir} = {
    summary => 'Where to find releases.txt',
    schema => 'str*',
    description => <<'_',

Defaults to ~/proj/perl/releases.

_
};

$SPEC{list_perl_releases}{args}{new} = {
    summary => 'Show only the the first release of a dist/module',
    schema => 'bool',
    description => <<'_',

This also implies --noinclude-renamed, unless --include-renamed has been
explicitly issued.

_
    tags => [qw/category:filter/],
};

$SPEC{list_perl_releases}{args}{latest} = {
    summary => 'Show only the the latest release of a dist/module',
    schema => 'bool',
    description => <<'_',

The releases.txt is assumed to be already sorted. So this option will make the
program pick the latest entry of each distribution.

_
    tags => [qw/category:filter/],
};

$SPEC{list_perl_releases}{args}{dist} = {
    summary => 'Show releases for a specific dist',
    schema => 'str*',
    tags => [qw/category:filter/],
};

$SPEC{list_perl_releases}{args}{include_renamed} = {
    summary => 'Whether to include new dist that is a rename of old dist',
    schema => 'bool',
    description => <<'_',

Marked by its field `oldname` being set.

_
    tags => [qw/category:filter/],
};

# WORKAROUND until perigen-acctbl has more advanced support for dates, e.g.
# generating filter fields like DATE.day (and DATE.day.{min,max}, etc),
# DATE.month, etc.

$SPEC{list_perl_releases}{args}{year} = {
    summary => 'Filter year',
    schema => 'int*',
    tags => [qw/category:filter/],
};
$SPEC{list_perl_releases}{args}{month} = {
    summary => 'Filter month',
    schema => 'int*',
    tags => [qw/category:filter/],
};
$SPEC{list_perl_releases}{args}{day} = {
    summary => 'Filter day',
    schema => 'int*',
    tags => [qw/category:filter/],
};

# i often find myself typing 'list-perl-releases -l' :)
$SPEC{list_perl_releases}{args}{detail}{cmdline_aliases} = {l=>{}};

if (module_path('Text::ANSITable::StyleSet::SHARYANTO::PerlReleaseTypes')) {
    $ENV{ANSITABLE_STYLE_SETS} //= '["SHARYANTO::PerlReleaseTypes"]';
}

Perinci::CmdLine::Any->new(url => '/main/list_perl_releases')->run;
